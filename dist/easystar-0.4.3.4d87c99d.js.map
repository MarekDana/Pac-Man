{"version":3,"sources":["node_modules/easystarjs/bin/easystar-0.4.3.js"],"names":[],"mappingsfile":"easystar-0.4.3.4d87c99d.js","sourceRoot":"..","sourcesContent":["var EasyStar =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/**\n\t*   EasyStar.js\n\t*   github.com/prettymuchbryce/EasyStarJS\n\t*   Licensed under the MIT license.\n\t*\n\t*   Implementation By Bryce Neal (@prettymuchbryce)\n\t**/\n\n\tvar EasyStar = {};\n\tvar Instance = __webpack_require__(1);\n\tvar Node = __webpack_require__(2);\n\tvar Heap = __webpack_require__(3);\n\n\tconst CLOSED_LIST = 0;\n\tconst OPEN_LIST = 1;\n\n\tmodule.exports = EasyStar;\n\n\tvar nextInstanceId = 1;\n\n\tEasyStar.js = function () {\n\t    var STRAIGHT_COST = 1.0;\n\t    var DIAGONAL_COST = 1.4;\n\t    var syncEnabled = false;\n\t    var pointsToAvoid = {};\n\t    var collisionGrid;\n\t    var costMap = {};\n\t    var pointsToCost = {};\n\t    var directionalConditions = {};\n\t    var allowCornerCutting = true;\n\t    var iterationsSoFar;\n\t    var instances = {};\n\t    var instanceQueue = [];\n\t    var iterationsPerCalculation = Number.MAX_VALUE;\n\t    var acceptableTiles;\n\t    var diagonalsEnabled = false;\n\n\t    /**\n\t    * Sets the collision grid that EasyStar uses.\n\t    *\n\t    * @param {Array|Number} tiles An array of numbers that represent\n\t    * which tiles in your grid should be considered\n\t    * acceptable, or \"walkable\".\n\t    **/\n\t    this.setAcceptableTiles = function (tiles) {\n\t        if (tiles instanceof Array) {\n\t            // Array\n\t            acceptableTiles = tiles;\n\t        } else if (!isNaN(parseFloat(tiles)) && isFinite(tiles)) {\n\t            // Number\n\t            acceptableTiles = [tiles];\n\t        }\n\t    };\n\n\t    /**\n\t    * Enables sync mode for this EasyStar instance..\n\t    * if you're into that sort of thing.\n\t    **/\n\t    this.enableSync = function () {\n\t        syncEnabled = true;\n\t    };\n\n\t    /**\n\t    * Disables sync mode for this EasyStar instance.\n\t    **/\n\t    this.disableSync = function () {\n\t        syncEnabled = false;\n\t    };\n\n\t    /**\n\t     * Enable diagonal pathfinding.\n\t     */\n\t    this.enableDiagonals = function () {\n\t        diagonalsEnabled = true;\n\t    };\n\n\t    /**\n\t     * Disable diagonal pathfinding.\n\t     */\n\t    this.disableDiagonals = function () {\n\t        diagonalsEnabled = false;\n\t    };\n\n\t    /**\n\t    * Sets the collision grid that EasyStar uses.\n\t    *\n\t    * @param {Array} grid The collision grid that this EasyStar instance will read from.\n\t    * This should be a 2D Array of Numbers.\n\t    **/\n\t    this.setGrid = function (grid) {\n\t        collisionGrid = grid;\n\n\t        //Setup cost map\n\t        for (var y = 0; y < collisionGrid.length; y++) {\n\t            for (var x = 0; x < collisionGrid[0].length; x++) {\n\t                if (!costMap[collisionGrid[y][x]]) {\n\t                    costMap[collisionGrid[y][x]] = 1;\n\t                }\n\t            }\n\t        }\n\t    };\n\n\t    /**\n\t    * Sets the tile cost for a particular tile type.\n\t    *\n\t    * @param {Number} The tile type to set the cost for.\n\t    * @param {Number} The multiplicative cost associated with the given tile.\n\t    **/\n\t    this.setTileCost = function (tileType, cost) {\n\t        costMap[tileType] = cost;\n\t    };\n\n\t    /**\n\t    * Sets the an additional cost for a particular point.\n\t    * Overrides the cost from setTileCost.\n\t    *\n\t    * @param {Number} x The x value of the point to cost.\n\t    * @param {Number} y The y value of the point to cost.\n\t    * @param {Number} The multiplicative cost associated with the given point.\n\t    **/\n\t    this.setAdditionalPointCost = function (x, y, cost) {\n\t        if (pointsToCost[y] === undefined) {\n\t            pointsToCost[y] = {};\n\t        }\n\t        pointsToCost[y][x] = cost;\n\t    };\n\n\t    /**\n\t    * Remove the additional cost for a particular point.\n\t    *\n\t    * @param {Number} x The x value of the point to stop costing.\n\t    * @param {Number} y The y value of the point to stop costing.\n\t    **/\n\t    this.removeAdditionalPointCost = function (x, y) {\n\t        if (pointsToCost[y] !== undefined) {\n\t            delete pointsToCost[y][x];\n\t        }\n\t    };\n\n\t    /**\n\t    * Remove all additional point costs.\n\t    **/\n\t    this.removeAllAdditionalPointCosts = function () {\n\t        pointsToCost = {};\n\t    };\n\n\t    /**\n\t    * Sets a directional condition on a tile\n\t    *\n\t    * @param {Number} x The x value of the point.\n\t    * @param {Number} y The y value of the point.\n\t    * @param {Array.<String>} allowedDirections A list of all the allowed directions that can access\n\t    * the tile.\n\t    **/\n\t    this.setDirectionalCondition = function (x, y, allowedDirections) {\n\t        if (directionalConditions[y] === undefined) {\n\t            directionalConditions[y] = {};\n\t        }\n\t        directionalConditions[y][x] = allowedDirections;\n\t    };\n\n\t    /**\n\t    * Remove all directional conditions\n\t    **/\n\t    this.removeAllDirectionalConditions = function () {\n\t        directionalConditions = {};\n\t    };\n\n\t    /**\n\t    * Sets the number of search iterations per calculation.\n\t    * A lower number provides a slower result, but more practical if you\n\t    * have a large tile-map and don't want to block your thread while\n\t    * finding a path.\n\t    *\n\t    * @param {Number} iterations The number of searches to prefrom per calculate() call.\n\t    **/\n\t    this.setIterationsPerCalculation = function (iterations) {\n\t        iterationsPerCalculation = iterations;\n\t    };\n\n\t    /**\n\t    * Avoid a particular point on the grid,\n\t    * regardless of whether or not it is an acceptable tile.\n\t    *\n\t    * @param {Number} x The x value of the point to avoid.\n\t    * @param {Number} y The y value of the point to avoid.\n\t    **/\n\t    this.avoidAdditionalPoint = function (x, y) {\n\t        if (pointsToAvoid[y] === undefined) {\n\t            pointsToAvoid[y] = {};\n\t        }\n\t        pointsToAvoid[y][x] = 1;\n\t    };\n\n\t    /**\n\t    * Stop avoiding a particular point on the grid.\n\t    *\n\t    * @param {Number} x The x value of the point to stop avoiding.\n\t    * @param {Number} y The y value of the point to stop avoiding.\n\t    **/\n\t    this.stopAvoidingAdditionalPoint = function (x, y) {\n\t        if (pointsToAvoid[y] !== undefined) {\n\t            delete pointsToAvoid[y][x];\n\t        }\n\t    };\n\n\t    /**\n\t    * Enables corner cutting in diagonal movement.\n\t    **/\n\t    this.enableCornerCutting = function () {\n\t        allowCornerCutting = true;\n\t    };\n\n\t    /**\n\t    * Disables corner cutting in diagonal movement.\n\t    **/\n\t    this.disableCornerCutting = function () {\n\t        allowCornerCutting = false;\n\t    };\n\n\t    /**\n\t    * Stop avoiding all additional points on the grid.\n\t    **/\n\t    this.stopAvoidingAllAdditionalPoints = function () {\n\t        pointsToAvoid = {};\n\t    };\n\n\t    /**\n\t    * Find a path.\n\t    *\n\t    * @param {Number} startX The X position of the starting point.\n\t    * @param {Number} startY The Y position of the starting point.\n\t    * @param {Number} endX The X position of the ending point.\n\t    * @param {Number} endY The Y position of the ending point.\n\t    * @param {Function} callback A function that is called when your path\n\t    * is found, or no path is found.\n\t    * @return {Number} A numeric, non-zero value which identifies the created instance. This value can be passed to cancelPath to cancel the path calculation.\n\t    *\n\t    **/\n\t    this.findPath = function (startX, startY, endX, endY, callback) {\n\t        // Wraps the callback for sync vs async logic\n\t        var callbackWrapper = function (result) {\n\t            if (syncEnabled) {\n\t                callback(result);\n\t            } else {\n\t                setTimeout(function () {\n\t                    callback(result);\n\t                });\n\t            }\n\t        };\n\n\t        // No acceptable tiles were set\n\t        if (acceptableTiles === undefined) {\n\t            throw new Error(\"You can't set a path without first calling setAcceptableTiles() on EasyStar.\");\n\t        }\n\t        // No grid was set\n\t        if (collisionGrid === undefined) {\n\t            throw new Error(\"You can't set a path without first calling setGrid() on EasyStar.\");\n\t        }\n\n\t        // Start or endpoint outside of scope.\n\t        if (startX < 0 || startY < 0 || endX < 0 || endY < 0 || startX > collisionGrid[0].length - 1 || startY > collisionGrid.length - 1 || endX > collisionGrid[0].length - 1 || endY > collisionGrid.length - 1) {\n\t            throw new Error(\"Your start or end point is outside the scope of your grid.\");\n\t        }\n\n\t        // Start and end are the same tile.\n\t        if (startX === endX && startY === endY) {\n\t            callbackWrapper([]);\n\t            return;\n\t        }\n\n\t        // End point is not an acceptable tile.\n\t        var endTile = collisionGrid[endY][endX];\n\t        var isAcceptable = false;\n\t        for (var i = 0; i < acceptableTiles.length; i++) {\n\t            if (endTile === acceptableTiles[i]) {\n\t                isAcceptable = true;\n\t                break;\n\t            }\n\t        }\n\n\t        if (isAcceptable === false) {\n\t            callbackWrapper(null);\n\t            return;\n\t        }\n\n\t        // Create the instance\n\t        var instance = new Instance();\n\t        instance.openList = new Heap(function (nodeA, nodeB) {\n\t            return nodeA.bestGuessDistance() - nodeB.bestGuessDistance();\n\t        });\n\t        instance.isDoneCalculating = false;\n\t        instance.nodeHash = {};\n\t        instance.startX = startX;\n\t        instance.startY = startY;\n\t        instance.endX = endX;\n\t        instance.endY = endY;\n\t        instance.callback = callbackWrapper;\n\n\t        instance.openList.push(coordinateToNode(instance, instance.startX, instance.startY, null, STRAIGHT_COST));\n\n\t        var instanceId = nextInstanceId++;\n\t        instances[instanceId] = instance;\n\t        instanceQueue.push(instanceId);\n\t        return instanceId;\n\t    };\n\n\t    /**\n\t     * Cancel a path calculation.\n\t     *\n\t     * @param {Number} instanceId The instance ID of the path being calculated\n\t     * @return {Boolean} True if an instance was found and cancelled.\n\t     *\n\t     **/\n\t    this.cancelPath = function (instanceId) {\n\t        if (instanceId in instances) {\n\t            delete instances[instanceId];\n\t            // No need to remove it from instanceQueue\n\t            return true;\n\t        }\n\t        return false;\n\t    };\n\n\t    /**\n\t    * This method steps through the A* Algorithm in an attempt to\n\t    * find your path(s). It will search 4-8 tiles (depending on diagonals) for every calculation.\n\t    * You can change the number of calculations done in a call by using\n\t    * easystar.setIteratonsPerCalculation().\n\t    **/\n\t    this.calculate = function () {\n\t        if (instanceQueue.length === 0 || collisionGrid === undefined || acceptableTiles === undefined) {\n\t            return;\n\t        }\n\t        for (iterationsSoFar = 0; iterationsSoFar < iterationsPerCalculation; iterationsSoFar++) {\n\t            if (instanceQueue.length === 0) {\n\t                return;\n\t            }\n\n\t            if (syncEnabled) {\n\t                // If this is a sync instance, we want to make sure that it calculates synchronously.\n\t                iterationsSoFar = 0;\n\t            }\n\n\t            var instanceId = instanceQueue[0];\n\t            var instance = instances[instanceId];\n\t            if (typeof instance == 'undefined') {\n\t                // This instance was cancelled\n\t                instanceQueue.shift();\n\t                continue;\n\t            }\n\n\t            // Couldn't find a path.\n\t            if (instance.openList.size() === 0) {\n\t                instance.callback(null);\n\t                delete instances[instanceId];\n\t                instanceQueue.shift();\n\t                continue;\n\t            }\n\n\t            var searchNode = instance.openList.pop();\n\n\t            // Handles the case where we have found the destination\n\t            if (instance.endX === searchNode.x && instance.endY === searchNode.y) {\n\t                var path = [];\n\t                path.push({ x: searchNode.x, y: searchNode.y });\n\t                var parent = searchNode.parent;\n\t                while (parent != null) {\n\t                    path.push({ x: parent.x, y: parent.y });\n\t                    parent = parent.parent;\n\t                }\n\t                path.reverse();\n\t                var ip = path;\n\t                instance.callback(ip);\n\t                delete instances[instanceId];\n\t                instanceQueue.shift();\n\t                continue;\n\t            }\n\n\t            searchNode.list = CLOSED_LIST;\n\n\t            if (searchNode.y > 0) {\n\t                checkAdjacentNode(instance, searchNode, 0, -1, STRAIGHT_COST * getTileCost(searchNode.x, searchNode.y - 1));\n\t            }\n\t            if (searchNode.x < collisionGrid[0].length - 1) {\n\t                checkAdjacentNode(instance, searchNode, 1, 0, STRAIGHT_COST * getTileCost(searchNode.x + 1, searchNode.y));\n\t            }\n\t            if (searchNode.y < collisionGrid.length - 1) {\n\t                checkAdjacentNode(instance, searchNode, 0, 1, STRAIGHT_COST * getTileCost(searchNode.x, searchNode.y + 1));\n\t            }\n\t            if (searchNode.x > 0) {\n\t                checkAdjacentNode(instance, searchNode, -1, 0, STRAIGHT_COST * getTileCost(searchNode.x - 1, searchNode.y));\n\t            }\n\t            if (diagonalsEnabled) {\n\t                if (searchNode.x > 0 && searchNode.y > 0) {\n\n\t                    if (allowCornerCutting || isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y - 1, searchNode) && isTileWalkable(collisionGrid, acceptableTiles, searchNode.x - 1, searchNode.y, searchNode)) {\n\n\t                        checkAdjacentNode(instance, searchNode, -1, -1, DIAGONAL_COST * getTileCost(searchNode.x - 1, searchNode.y - 1));\n\t                    }\n\t                }\n\t                if (searchNode.x < collisionGrid[0].length - 1 && searchNode.y < collisionGrid.length - 1) {\n\n\t                    if (allowCornerCutting || isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y + 1, searchNode) && isTileWalkable(collisionGrid, acceptableTiles, searchNode.x + 1, searchNode.y, searchNode)) {\n\n\t                        checkAdjacentNode(instance, searchNode, 1, 1, DIAGONAL_COST * getTileCost(searchNode.x + 1, searchNode.y + 1));\n\t                    }\n\t                }\n\t                if (searchNode.x < collisionGrid[0].length - 1 && searchNode.y > 0) {\n\n\t                    if (allowCornerCutting || isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y - 1, searchNode) && isTileWalkable(collisionGrid, acceptableTiles, searchNode.x + 1, searchNode.y, searchNode)) {\n\n\t                        checkAdjacentNode(instance, searchNode, 1, -1, DIAGONAL_COST * getTileCost(searchNode.x + 1, searchNode.y - 1));\n\t                    }\n\t                }\n\t                if (searchNode.x > 0 && searchNode.y < collisionGrid.length - 1) {\n\n\t                    if (allowCornerCutting || isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y + 1, searchNode) && isTileWalkable(collisionGrid, acceptableTiles, searchNode.x - 1, searchNode.y, searchNode)) {\n\n\t                        checkAdjacentNode(instance, searchNode, -1, 1, DIAGONAL_COST * getTileCost(searchNode.x - 1, searchNode.y + 1));\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    };\n\n\t    // Private methods follow\n\t    var checkAdjacentNode = function (instance, searchNode, x, y, cost) {\n\t        var adjacentCoordinateX = searchNode.x + x;\n\t        var adjacentCoordinateY = searchNode.y + y;\n\n\t        if ((pointsToAvoid[adjacentCoordinateY] === undefined || pointsToAvoid[adjacentCoordinateY][adjacentCoordinateX] === undefined) && isTileWalkable(collisionGrid, acceptableTiles, adjacentCoordinateX, adjacentCoordinateY, searchNode)) {\n\t            var node = coordinateToNode(instance, adjacentCoordinateX, adjacentCoordinateY, searchNode, cost);\n\n\t            if (node.list === undefined) {\n\t                node.list = OPEN_LIST;\n\t                instance.openList.push(node);\n\t            } else if (searchNode.costSoFar + cost < node.costSoFar) {\n\t                node.costSoFar = searchNode.costSoFar + cost;\n\t                node.parent = searchNode;\n\t                instance.openList.updateItem(node);\n\t            }\n\t        }\n\t    };\n\n\t    // Helpers\n\t    var isTileWalkable = function (collisionGrid, acceptableTiles, x, y, sourceNode) {\n\t        var directionalCondition = directionalConditions[y] && directionalConditions[y][x];\n\t        if (directionalCondition) {\n\t            var direction = calculateDirection(sourceNode.x - x, sourceNode.y - y);\n\t            var directionIncluded = function () {\n\t                for (var i = 0; i < directionalCondition.length; i++) {\n\t                    if (directionalCondition[i] === direction) return true;\n\t                }\n\t                return false;\n\t            };\n\t            if (!directionIncluded()) return false;\n\t        }\n\t        for (var i = 0; i < acceptableTiles.length; i++) {\n\t            if (collisionGrid[y][x] === acceptableTiles[i]) {\n\t                return true;\n\t            }\n\t        }\n\n\t        return false;\n\t    };\n\n\t    /**\n\t     * -1, -1 | 0, -1  | 1, -1\n\t     * -1,  0 | SOURCE | 1,  0\n\t     * -1,  1 | 0,  1  | 1,  1\n\t     */\n\t    var calculateDirection = function (diffX, diffY) {\n\t        if (diffX === 0 && diffY === -1) return EasyStar.TOP;else if (diffX === 1 && diffY === -1) return EasyStar.TOP_RIGHT;else if (diffX === 1 && diffY === 0) return EasyStar.RIGHT;else if (diffX === 1 && diffY === 1) return EasyStar.BOTTOM_RIGHT;else if (diffX === 0 && diffY === 1) return EasyStar.BOTTOM;else if (diffX === -1 && diffY === 1) return EasyStar.BOTTOM_LEFT;else if (diffX === -1 && diffY === 0) return EasyStar.LEFT;else if (diffX === -1 && diffY === -1) return EasyStar.TOP_LEFT;\n\t        throw new Error('These differences are not valid: ' + diffX + ', ' + diffY);\n\t    };\n\n\t    var getTileCost = function (x, y) {\n\t        return pointsToCost[y] && pointsToCost[y][x] || costMap[collisionGrid[y][x]];\n\t    };\n\n\t    var coordinateToNode = function (instance, x, y, parent, cost) {\n\t        if (instance.nodeHash[y] !== undefined) {\n\t            if (instance.nodeHash[y][x] !== undefined) {\n\t                return instance.nodeHash[y][x];\n\t            }\n\t        } else {\n\t            instance.nodeHash[y] = {};\n\t        }\n\t        var simpleDistanceToTarget = getDistance(x, y, instance.endX, instance.endY);\n\t        if (parent !== null) {\n\t            var costSoFar = parent.costSoFar + cost;\n\t        } else {\n\t            costSoFar = 0;\n\t        }\n\t        var node = new Node(parent, x, y, costSoFar, simpleDistanceToTarget);\n\t        instance.nodeHash[y][x] = node;\n\t        return node;\n\t    };\n\n\t    var getDistance = function (x1, y1, x2, y2) {\n\t        if (diagonalsEnabled) {\n\t            // Octile distance\n\t            var dx = Math.abs(x1 - x2);\n\t            var dy = Math.abs(y1 - y2);\n\t            if (dx < dy) {\n\t                return DIAGONAL_COST * dx + dy;\n\t            } else {\n\t                return DIAGONAL_COST * dy + dx;\n\t            }\n\t        } else {\n\t            // Manhattan distance\n\t            var dx = Math.abs(x1 - x2);\n\t            var dy = Math.abs(y1 - y2);\n\t            return dx + dy;\n\t        }\n\t    };\n\t};\n\n\tEasyStar.TOP = 'TOP';\n\tEasyStar.TOP_RIGHT = 'TOP_RIGHT';\n\tEasyStar.RIGHT = 'RIGHT';\n\tEasyStar.BOTTOM_RIGHT = 'BOTTOM_RIGHT';\n\tEasyStar.BOTTOM = 'BOTTOM';\n\tEasyStar.BOTTOM_LEFT = 'BOTTOM_LEFT';\n\tEasyStar.LEFT = 'LEFT';\n\tEasyStar.TOP_LEFT = 'TOP_LEFT';\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n\t/**\n\t * Represents a single instance of EasyStar.\n\t * A path that is in the queue to eventually be found.\n\t */\n\tmodule.exports = function () {\n\t    this.pointsToAvoid = {};\n\t    this.startX;\n\t    this.callback;\n\t    this.startY;\n\t    this.endX;\n\t    this.endY;\n\t    this.nodeHash = {};\n\t    this.openList;\n\t};\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\t/**\n\t* A simple Node that represents a single tile on the grid.\n\t* @param {Object} parent The parent node.\n\t* @param {Number} x The x position on the grid.\n\t* @param {Number} y The y position on the grid.\n\t* @param {Number} costSoFar How far this node is in moves*cost from the start.\n\t* @param {Number} simpleDistanceToTarget Manhatten distance to the end point.\n\t**/\n\tmodule.exports = function (parent, x, y, costSoFar, simpleDistanceToTarget) {\n\t    this.parent = parent;\n\t    this.x = x;\n\t    this.y = y;\n\t    this.costSoFar = costSoFar;\n\t    this.simpleDistanceToTarget = simpleDistanceToTarget;\n\n\t    /**\n\t    * @return {Number} Best guess distance of a cost using this node.\n\t    **/\n\t    this.bestGuessDistance = function () {\n\t        return this.costSoFar + this.simpleDistanceToTarget;\n\t    };\n\t};\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(4);\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Generated by CoffeeScript 1.8.0\n\t(function () {\n\t  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n\t  floor = Math.floor, min = Math.min;\n\n\t  /*\n\t  Default comparison function to be used\n\t   */\n\n\t  defaultCmp = function (x, y) {\n\t    if (x < y) {\n\t      return -1;\n\t    }\n\t    if (x > y) {\n\t      return 1;\n\t    }\n\t    return 0;\n\t  };\n\n\t  /*\n\t  Insert item x in list a, and keep it sorted assuming a is sorted.\n\t  \n\t  If x is already in a, insert it to the right of the rightmost x.\n\t  \n\t  Optional args lo (default 0) and hi (default a.length) bound the slice\n\t  of a to be searched.\n\t   */\n\n\t  insort = function (a, x, lo, hi, cmp) {\n\t    var mid;\n\t    if (lo == null) {\n\t      lo = 0;\n\t    }\n\t    if (cmp == null) {\n\t      cmp = defaultCmp;\n\t    }\n\t    if (lo < 0) {\n\t      throw new Error('lo must be non-negative');\n\t    }\n\t    if (hi == null) {\n\t      hi = a.length;\n\t    }\n\t    while (lo < hi) {\n\t      mid = floor((lo + hi) / 2);\n\t      if (cmp(x, a[mid]) < 0) {\n\t        hi = mid;\n\t      } else {\n\t        lo = mid + 1;\n\t      }\n\t    }\n\t    return [].splice.apply(a, [lo, lo - lo].concat(x)), x;\n\t  };\n\n\t  /*\n\t  Push item onto heap, maintaining the heap invariant.\n\t   */\n\n\t  heappush = function (array, item, cmp) {\n\t    if (cmp == null) {\n\t      cmp = defaultCmp;\n\t    }\n\t    array.push(item);\n\t    return _siftdown(array, 0, array.length - 1, cmp);\n\t  };\n\n\t  /*\n\t  Pop the smallest item off the heap, maintaining the heap invariant.\n\t   */\n\n\t  heappop = function (array, cmp) {\n\t    var lastelt, returnitem;\n\t    if (cmp == null) {\n\t      cmp = defaultCmp;\n\t    }\n\t    lastelt = array.pop();\n\t    if (array.length) {\n\t      returnitem = array[0];\n\t      array[0] = lastelt;\n\t      _siftup(array, 0, cmp);\n\t    } else {\n\t      returnitem = lastelt;\n\t    }\n\t    return returnitem;\n\t  };\n\n\t  /*\n\t  Pop and return the current smallest value, and add the new item.\n\t  \n\t  This is more efficient than heappop() followed by heappush(), and can be\n\t  more appropriate when using a fixed size heap. Note that the value\n\t  returned may be larger than item! That constrains reasonable use of\n\t  this routine unless written as part of a conditional replacement:\n\t      if item > array[0]\n\t        item = heapreplace(array, item)\n\t   */\n\n\t  heapreplace = function (array, item, cmp) {\n\t    var returnitem;\n\t    if (cmp == null) {\n\t      cmp = defaultCmp;\n\t    }\n\t    returnitem = array[0];\n\t    array[0] = item;\n\t    _siftup(array, 0, cmp);\n\t    return returnitem;\n\t  };\n\n\t  /*\n\t  Fast version of a heappush followed by a heappop.\n\t   */\n\n\t  heappushpop = function (array, item, cmp) {\n\t    var _ref;\n\t    if (cmp == null) {\n\t      cmp = defaultCmp;\n\t    }\n\t    if (array.length && cmp(array[0], item) < 0) {\n\t      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n\t      _siftup(array, 0, cmp);\n\t    }\n\t    return item;\n\t  };\n\n\t  /*\n\t  Transform list into a heap, in-place, in O(array.length) time.\n\t   */\n\n\t  heapify = function (array, cmp) {\n\t    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n\t    if (cmp == null) {\n\t      cmp = defaultCmp;\n\t    }\n\t    _ref1 = function () {\n\t      _results1 = [];\n\t      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--) {\n\t        _results1.push(_j);\n\t      }\n\t      return _results1;\n\t    }.apply(this).reverse();\n\t    _results = [];\n\t    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n\t      i = _ref1[_i];\n\t      _results.push(_siftup(array, i, cmp));\n\t    }\n\t    return _results;\n\t  };\n\n\t  /*\n\t  Update the position of the given item in the heap.\n\t  This function should be called every time the item is being modified.\n\t   */\n\n\t  updateItem = function (array, item, cmp) {\n\t    var pos;\n\t    if (cmp == null) {\n\t      cmp = defaultCmp;\n\t    }\n\t    pos = array.indexOf(item);\n\t    if (pos === -1) {\n\t      return;\n\t    }\n\t    _siftdown(array, 0, pos, cmp);\n\t    return _siftup(array, pos, cmp);\n\t  };\n\n\t  /*\n\t  Find the n largest elements in a dataset.\n\t   */\n\n\t  nlargest = function (array, n, cmp) {\n\t    var elem, result, _i, _len, _ref;\n\t    if (cmp == null) {\n\t      cmp = defaultCmp;\n\t    }\n\t    result = array.slice(0, n);\n\t    if (!result.length) {\n\t      return result;\n\t    }\n\t    heapify(result, cmp);\n\t    _ref = array.slice(n);\n\t    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\t      elem = _ref[_i];\n\t      heappushpop(result, elem, cmp);\n\t    }\n\t    return result.sort(cmp).reverse();\n\t  };\n\n\t  /*\n\t  Find the n smallest elements in a dataset.\n\t   */\n\n\t  nsmallest = function (array, n, cmp) {\n\t    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n\t    if (cmp == null) {\n\t      cmp = defaultCmp;\n\t    }\n\t    if (n * 10 <= array.length) {\n\t      result = array.slice(0, n).sort(cmp);\n\t      if (!result.length) {\n\t        return result;\n\t      }\n\t      los = result[result.length - 1];\n\t      _ref = array.slice(n);\n\t      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n\t        elem = _ref[_i];\n\t        if (cmp(elem, los) < 0) {\n\t          insort(result, elem, 0, null, cmp);\n\t          result.pop();\n\t          los = result[result.length - 1];\n\t        }\n\t      }\n\t      return result;\n\t    }\n\t    heapify(array, cmp);\n\t    _results = [];\n\t    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n\t      _results.push(heappop(array, cmp));\n\t    }\n\t    return _results;\n\t  };\n\n\t  _siftdown = function (array, startpos, pos, cmp) {\n\t    var newitem, parent, parentpos;\n\t    if (cmp == null) {\n\t      cmp = defaultCmp;\n\t    }\n\t    newitem = array[pos];\n\t    while (pos > startpos) {\n\t      parentpos = pos - 1 >> 1;\n\t      parent = array[parentpos];\n\t      if (cmp(newitem, parent) < 0) {\n\t        array[pos] = parent;\n\t        pos = parentpos;\n\t        continue;\n\t      }\n\t      break;\n\t    }\n\t    return array[pos] = newitem;\n\t  };\n\n\t  _siftup = function (array, pos, cmp) {\n\t    var childpos, endpos, newitem, rightpos, startpos;\n\t    if (cmp == null) {\n\t      cmp = defaultCmp;\n\t    }\n\t    endpos = array.length;\n\t    startpos = pos;\n\t    newitem = array[pos];\n\t    childpos = 2 * pos + 1;\n\t    while (childpos < endpos) {\n\t      rightpos = childpos + 1;\n\t      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n\t        childpos = rightpos;\n\t      }\n\t      array[pos] = array[childpos];\n\t      pos = childpos;\n\t      childpos = 2 * pos + 1;\n\t    }\n\t    array[pos] = newitem;\n\t    return _siftdown(array, startpos, pos, cmp);\n\t  };\n\n\t  Heap = function () {\n\t    Heap.push = heappush;\n\n\t    Heap.pop = heappop;\n\n\t    Heap.replace = heapreplace;\n\n\t    Heap.pushpop = heappushpop;\n\n\t    Heap.heapify = heapify;\n\n\t    Heap.updateItem = updateItem;\n\n\t    Heap.nlargest = nlargest;\n\n\t    Heap.nsmallest = nsmallest;\n\n\t    function Heap(cmp) {\n\t      this.cmp = cmp != null ? cmp : defaultCmp;\n\t      this.nodes = [];\n\t    }\n\n\t    Heap.prototype.push = function (x) {\n\t      return heappush(this.nodes, x, this.cmp);\n\t    };\n\n\t    Heap.prototype.pop = function () {\n\t      return heappop(this.nodes, this.cmp);\n\t    };\n\n\t    Heap.prototype.peek = function () {\n\t      return this.nodes[0];\n\t    };\n\n\t    Heap.prototype.contains = function (x) {\n\t      return this.nodes.indexOf(x) !== -1;\n\t    };\n\n\t    Heap.prototype.replace = function (x) {\n\t      return heapreplace(this.nodes, x, this.cmp);\n\t    };\n\n\t    Heap.prototype.pushpop = function (x) {\n\t      return heappushpop(this.nodes, x, this.cmp);\n\t    };\n\n\t    Heap.prototype.heapify = function () {\n\t      return heapify(this.nodes, this.cmp);\n\t    };\n\n\t    Heap.prototype.updateItem = function (x) {\n\t      return updateItem(this.nodes, x, this.cmp);\n\t    };\n\n\t    Heap.prototype.clear = function () {\n\t      return this.nodes = [];\n\t    };\n\n\t    Heap.prototype.empty = function () {\n\t      return this.nodes.length === 0;\n\t    };\n\n\t    Heap.prototype.size = function () {\n\t      return this.nodes.length;\n\t    };\n\n\t    Heap.prototype.clone = function () {\n\t      var heap;\n\t      heap = new Heap();\n\t      heap.nodes = this.nodes.slice(0);\n\t      return heap;\n\t    };\n\n\t    Heap.prototype.toArray = function () {\n\t      return this.nodes.slice(0);\n\t    };\n\n\t    Heap.prototype.insert = Heap.prototype.push;\n\n\t    Heap.prototype.top = Heap.prototype.peek;\n\n\t    Heap.prototype.front = Heap.prototype.peek;\n\n\t    Heap.prototype.has = Heap.prototype.contains;\n\n\t    Heap.prototype.copy = Heap.prototype.clone;\n\n\t    return Heap;\n\t  }();\n\n\t  (function (root, factory) {\n\t    if (true) {\n\t      return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else if (typeof exports === 'object') {\n\t      return module.exports = factory();\n\t    } else {\n\t      return root.Heap = factory();\n\t    }\n\t  })(this, function () {\n\t    return Heap;\n\t  });\n\t}).call(this);\n\n/***/ })\n/******/ ]);"]}